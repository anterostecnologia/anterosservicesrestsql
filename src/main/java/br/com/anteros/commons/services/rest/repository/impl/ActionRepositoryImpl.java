package br.com.anteros.commons.services.rest.repository.impl;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;

import br.com.anteros.commons.services.rest.repository.ActionRepository;
import br.com.anteros.persistence.dsl.osql.OSQLQuery;
import br.com.anteros.persistence.dsl.osql.types.OrderSpecifier;
import br.com.anteros.persistence.session.SQLSessionFactory;
import br.com.anteros.persistence.session.query.filter.AnterosSortFieldsHelper;
import br.com.anteros.persistence.session.repository.Page;
import br.com.anteros.persistence.session.repository.PageRequest;
import br.com.anteros.persistence.session.repository.impl.GenericSQLRepository;
import br.com.anteros.persistence.session.repository.impl.PageImpl;
import br.com.anteros.security.store.sql.domain.Action;
import br.com.anteros.security.store.sql.domain.TAction;

/**
 * Generated by Anteros Generator Maven Plugin at 23/10/2019 10:25:34
 **/

@Repository("actionRepository")
public class ActionRepositoryImpl extends GenericSQLRepository<Action, Long> implements ActionRepository {

	@Autowired
	public ActionRepositoryImpl(@Qualifier("sessionFactorySQL") SQLSessionFactory sessionFactory) {
		super(sessionFactory);
	}

	
	@Override
	public Page<Action> getActionsBySystem(String system, PageRequest pageRequest, String fieldsToForceLazy,
			String sort) {
		TAction tAction = new TAction("ACT");
		
		OSQLQuery queryCount = this.createObjectQuery();
		queryCount.from(tAction).where(tAction.resource.system.name.eq(system));
		
		long total = queryCount.count();		
		List<OrderSpecifier> orderBy = AnterosSortFieldsHelper.convertFieldsToOrderby(this.getSession(),
				tAction, this.getResultClass(), sort);		
		
		OSQLQuery query = this.createObjectQuery();
		query.from(tAction);
		query.where(tAction.resource.system.name.eq(system));
		query.orderBy(orderBy.toArray(new OrderSpecifier[] {}));
		query.setFieldsToForceLazy(fieldsToForceLazy);
		query.offset(pageRequest.getOffset());
		query.limit(pageRequest.getPageSize());
		
		List<Action> content = total > pageRequest.getOffset() ? query.list(tAction) : Collections.<Action>emptyList();

		return new PageImpl<Action>(content, pageRequest, total);
	}

}
