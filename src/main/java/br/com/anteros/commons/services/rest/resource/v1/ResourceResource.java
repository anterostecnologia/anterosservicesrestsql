package br.com.anteros.commons.services.rest.resource.v1;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import br.com.anteros.commons.services.rest.service.ResourceService;
import br.com.anteros.core.utils.StringUtils;
import br.com.anteros.persistence.metadata.EntityCache;
import br.com.anteros.persistence.metadata.descriptor.DescriptionField;
import br.com.anteros.persistence.session.query.SQLQueryException;
import br.com.anteros.persistence.session.query.filter.AnterosFilterDsl;
import br.com.anteros.persistence.session.query.filter.AnterosMultipleFieldsFilter;
import br.com.anteros.persistence.session.query.filter.DefaultFilterBuilder;
import br.com.anteros.persistence.session.query.filter.Filter;
import br.com.anteros.persistence.session.repository.Page;
import br.com.anteros.persistence.session.repository.PageRequest;
import br.com.anteros.persistence.session.repository.Pageable;
import br.com.anteros.persistence.session.repository.impl.PageImpl;
import br.com.anteros.persistence.session.service.SQLService;
import br.com.anteros.security.spring.AnterosSecurityManager;
import br.com.anteros.security.store.sql.domain.Resource;
import br.com.anteros.security.store.sql.domain.TResource;
import br.com.anteros.spring.web.resource.AbstractSQLResourceRest;

/**
*  Generated by Anteros Generator Maven Plugin at 29/12/2019 08:16:42
**/

@RestController
@RequestMapping(value = "/v1/resource")
public class ResourceResource extends AbstractSQLResourceRest<Resource, Long> {

	@Autowired
	@Lazy
	private ResourceService resourceService;

	@Autowired
	@Lazy
	protected AnterosSecurityManager anterosSecurityManager;

	@Override
	public SQLService<Resource, Long> getService() {
		return resourceService;
	}
	
	@Override
	protected Page<Resource> createConcretePage(List<Resource> content, PageRequest pageRequest,
			long totalElements) {
		return new PageResource(content, pageRequest, totalElements);
	}

	class PageResource extends PageImpl<Resource> {
		public PageResource(List<Resource> content) {
			super(content);
		}

		public PageResource(List<Resource> content, Pageable pageable, long total) {
			super(content, pageable, total);
		}
	}
	
	@Override
	protected List<Resource> createConcreteList(List<Resource> result) {
		return new ListResource(result);
	}
	
	class ListResource extends ArrayList<Resource>{
		public ListResource(Collection<? extends Resource> c) {
			super(c);
		}
	}
	
	
	/**
	 * Busca os recursos de um sistema
	 * 
	 * @param system
	 *            Sistema
	 * @return Lista de recursos
	 * @throws Exception
	 */
	@RequestMapping(value = "/getResourcesBySystem/{system}", params = { "page", "size", "sort", "fieldsToForceLazy" }, method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED, readOnly = true, transactionManager="transactionManagerSQL")
	public Page<Resource> getResourcesBySystem(@PathVariable(value = "system") String system, @RequestParam("page") int page, @RequestParam("size") int size,
			@RequestParam("sort") String sort, @RequestParam("fieldsToForceLazy") String fieldsToForceLazy) throws Exception {
		PageRequest pageRequest = new PageRequest(page, size);
		Page<Resource> resourcesBySystem = resourceService.getResourcesBySystem(system,pageRequest,fieldsToForceLazy,sort);
		Page<Resource> concretePage = this.createConcretePage(resourcesBySystem.getContent(), pageRequest, resourcesBySystem.getTotalElements());
		if (concretePage!=null) {
			return concretePage;
		}
		return null;
	}
	
	/**
	 * Busca os objetos da classe de acordo com o objeto filtro.
	 * 
	 * @param filter Objeto filtro
	 * @param page   Número da página
	 * @param size   Tamanho da página
	 * @return Página
	 * @throws Exception
	 */
	@RequestMapping(value = "/findWithFilter/{system}", params = { "page", "size","fieldsToForceLazy" }, method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED, readOnly = true, transactionManager = "transactionManagerSQL")
	public Page<Resource> find(@PathVariable(name="system")String system,@RequestBody Filter filter, @RequestParam(value = "page", required = true) int page,
			@RequestParam(value = "size", required = true) int size, @RequestParam("fieldsToForceLazy") String fieldsToForceLazy) throws Exception {
		PageRequest pageRequest = new PageRequest(page, size);

		DefaultFilterBuilder builder = AnterosFilterDsl.getFilterBuilder();

		String sort = builder.toSortSql(filter, getService().getSession(), getService().getResultClass());

		String sql = builder.toSql(filter, getService().getSession(), getService().getResultClass());
		
		EntityCache entityCache = getService().getSession().getEntityCacheManager().getEntityCache(getService().getResultClass());
		DescriptionField tenantId = entityCache.getTenantId();
		DescriptionField systemField = entityCache.getDescriptionField("system");
		sql = sql + " AND "+systemField.getSimpleColumn().getColumnName()+"="+'"'+system+'"';		
		
		
		if (tenantId!=null) {
			if (this.getService().getSession().getTenantId()==null) {
				throw new SQLQueryException("Informe o Tenant ID para realizar consulta na entidade "+entityCache.getEntityClass().getName());
			}
			sql = sql + " AND "+tenantId.getSimpleColumn().getColumnName()+"="+'"'+getService().getSession().getTenantId()+'"';
		}

		Page<Resource> result = getService().find("select * from " + getService().getTableName() + " where " + sql
				+ (StringUtils.isNotEmpty(sort) ? " ORDER BY " + sort : ""), builder.getParams(), pageRequest, true, fieldsToForceLazy);
		Page<Resource> concretePage = this.createConcretePage(result.getContent(), pageRequest, result.getTotalElements());
		if (concretePage!=null) {
			return concretePage;
		}
		return result;
	}
	
	/**
	 * Busca os objetos da classe de acordo com a string de filtro e os campos.
	 * 
	 * @param filter String filter
	 * @param fields String fields
	 * @param page   Número da página
	 * @param size   Tamanho da página
	 * @return Página
	 * @throws Exception
	 */
	@RequestMapping(value = "/findMultipleFields/{system}", params = { "filter", "fields", "page", "size",
			"sort","fieldsToForceLazy" }, method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED, readOnly = true, transactionManager = "transactionManagerSQL")
	public Page<Resource> find(@PathVariable(name="system")String system, @RequestParam(value = "filter", required = true) String filter,
			@RequestParam(value = "fields", required = true) String fields,
			@RequestParam(value = "page", required = true) int page,
			@RequestParam(value = "size", required = true) int size, @RequestParam(value = "sort") String sort,
			@RequestParam("fieldsToForceLazy") String fieldsToForceLazy)
			throws Exception {
		PageRequest pageRequest = new PageRequest(page, size);
		TResource tResource = new TResource("RES");
		tResource.system.name.eq(system);

		Page<Resource> result = new AnterosMultipleFieldsFilter<Resource>(tResource)
				.filter(filter).fields(fields).session(getService().getSession())
				.resultClass(getService().getResultClass()).fieldsSort(sort).page(pageRequest).buildAndGetPage();

		return new PageResource(result.getContent(), pageRequest, result.getTotalElements());
	}
}