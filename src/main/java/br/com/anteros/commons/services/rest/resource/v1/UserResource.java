package br.com.anteros.commons.services.rest.resource.v1;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import br.com.anteros.commons.services.rest.exception.UserException;
import br.com.anteros.commons.services.rest.service.UserService;
import br.com.anteros.persistence.session.repository.Page;
import br.com.anteros.persistence.session.repository.PageRequest;
import br.com.anteros.persistence.session.repository.Pageable;
import br.com.anteros.persistence.session.repository.impl.PageImpl;
import br.com.anteros.persistence.session.service.SQLService;
import br.com.anteros.security.spring.AnterosSecurityManager;
import br.com.anteros.security.store.sql.domain.User;
import br.com.anteros.spring.web.resource.AbstractSQLResourceRest;

/**
*  Generated by Anteros Generator Maven Plugin at 29/12/2019 08:16:42
**/

@RestController
@RequestMapping(value = "/v1/user")
public class UserResource extends AbstractSQLResourceRest<User, Long> {

	@Autowired
	@Lazy
	private UserService userService;

	@Autowired
	@Lazy
	protected AnterosSecurityManager anterosSecurityManager;

	@Override
	public SQLService<User, Long> getService() {
		return userService;
	}
	
	@Override
	protected Page<User> createConcretePage(List<User> content, PageRequest pageRequest,
			long totalElements) {
		return new PageUser(content, pageRequest, totalElements);
	}

	class PageUser extends PageImpl<User> {
		public PageUser(List<User> content) {
			super(content);
		}

		public PageUser(List<User> content, Pageable pageable, long total) {
			super(content, pageable, total);
		}
	}
	
	@Override
	protected List<User> createConcreteList(List<User> result) {
		return new ListUser(result);
	}
	
	class ListUser extends ArrayList<User>{
		public ListUser(Collection<? extends User> c) {
			super(c);
		}
	}
	
	
	/**
	 * Insere ou atualiza um objeto.
	 * 
	 * @param object Objeto a ser salvo
	 * @return Objeto salvo
	 * @throws Exception
	 */

	@RequestMapping(value = "/", method = { RequestMethod.POST, RequestMethod.PUT })
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED, readOnly = false, transactionManager = "transactionManagerSQL")
	@Override
	public User save(@RequestBody User object) throws Exception {
		if (object.getId() == null && !this.existsUserByLoginName(object.getLogin())) {			
			return super.save(object); 
		}
		User user = this.getUserByLogin(object.getLogin());
		if (user == null || user.getId().equals(object.getId())) {
			return super.save(object);
		}
		
		throw new UserException("Já existe um usuário com o login "+object.getLogin());		
		
	}
	
	private Boolean existsUserByLoginName(String login) throws Exception {
		User user = this.getUserByLogin(login);
		if (user == null) {
			return false;
		}
		
		if (login.equalsIgnoreCase(user.getLogin())){
			return true;
		}
		
		return false;		
	}
	

	/**
	 * Busca um objeto pelo seu ID.
	 * 
	 * @param id
	 *            Identificador do objeto.
	 * @return Objeto encontrado.
	 * @throws Exception
	 */
	@RequestMapping(value = "/getUserByLogin/{login}", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED, readOnly = true, transactionManager="transactionManagerSQL")
	public User getUserByLogin(@PathVariable(value = "login") String login) throws Exception {
		return userService.getUserByLoginName(login);
	}
	
	/**
	 * Busca um objeto pelo seu ID.
	 * 
	 * @param id
	 *            Identificador do objeto.
	 * @return Objeto encontrado.
	 * @throws Exception
	 */
	@RequestMapping(value = "/getUserByLogin", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED, readOnly = true, transactionManager="transactionManagerSQL")
	public User getUserByLogin2(@RequestBody String login) throws Exception {
		return userService.getUserByLoginName(login);
	}
	
	
}